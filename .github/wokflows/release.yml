name: Release Build and Upload

# Trigger the workflow only when a tag starting with 'v' (e.g., v0.1.0, v1.2.3) is pushed
on:
  push:
    tags:
      - 'v*.*.*' # Matches semantic version tags like v1.0.0

# Define environment variables reusable in the workflow
env:
  # !!! IMPORTANT: Change this to your actual binary name !!!
  BINARY_NAME: mouse_tracking
  # Set the CARGO_TERM_COLOR to always print colors in logs
  CARGO_TERM_COLOR: always

jobs:
  # Job to build the release executable for Windows
  build_release_windows:
    name: Build Release (Windows)
    # Run on the latest available Windows runner
    runs-on: windows-latest

    # Define permissions required by the job
    permissions:
      contents: write # Needed to create releases and upload assets

    steps:
      # 1. Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Rust toolchain (using stable version)
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          # Optional: Specify components if needed, e.g., clippy, rustfmt
          # components: clippy, rustfmt
          toolchain: stable

      # 3. Cache Cargo dependencies for faster builds
      # Caches ~/.cargo/bin, ~/.cargo/registry/index, ~/.cargo/registry/cache, target/
      - name: Cache Cargo Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Optional: Specify workspace key if you have multiple crates
          # workspace-key: ${{ github.sha }}
          prefix-key: "windows-release" # Differentiate cache based on OS/job

      # 4. Build the application in release mode
      - name: Build Release Binary
        # Build specifically for the target architecture (usually x86_64-pc-windows-msvc)
        run: cargo build --verbose --release --locked # --target x86_64-pc-windows-msvc (usually implicit)
        # Use --locked to ensure Cargo.lock is used

      # 5. Prepare artifact for release (create a ZIP archive)
      - name: Package for Release
        # Uses PowerShell built-in command available on Windows runners
        # Creates a zip named like 'mouse_tracking-v0.1.0-windows-x86_64.zip'
        run: |
          Compress-Archive -Path target/release/${{ env.BINARY_NAME }}.exe -DestinationPath ${{ env.BINARY_NAME }}-${{ github.ref_name }}-windows-${{ runner.arch }}.zip
        shell: powershell

      # 6. Create GitHub Release and Upload Asset
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          # The token is provided by GitHub Actions
          # token: ${{ secrets.GITHUB_TOKEN }} # Default, no need to explicitly set unless overriding

          # Use the tag name (e.g., v0.1.0) for the release tag and name
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}

          # Optional: Define release notes
          # body: | # Example using multiline body
          #   Automated release for ${{ github.ref_name }}
          #   See CHANGELOG.md for details.
          # body_path: CHANGELOG.md # Or point to a file

          # Set draft and prerelease flags if needed
          draft: false
          prerelease: false # Set to true if it's a pre-release version (e.g., v0.1.0-beta.1)

          # List the files to upload as release assets
          files: |
            ${{ env.BINARY_NAME }}-${{ github.ref_name }}-windows-${{ runner.arch }}.zip